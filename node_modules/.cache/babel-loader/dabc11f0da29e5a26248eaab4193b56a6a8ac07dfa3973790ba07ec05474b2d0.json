{"ast":null,"code":"import { normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"src\", \"alt\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"img\", {\n    ref: \"a\",\n    src: $props.src,\n    alt: $props.alt,\n    class: _normalizeClass({\n      'loading': $data.isLoading\n    })\n  }, null, 10 /* CLASS, PROPS */, _hoisted_1), _createCommentVNode(\" <img ref=\\\"b\\\" :src=\\\"src\\\" :alt=\\\"alt\\\" :class=\\\"{ 'loading': isLoading }\\\" />s \"), _createCommentVNode(\" <img ref=\\\"c\\\" :src=\\\"src\\\" :alt=\\\"alt\\\" :class=\\\"{ 'loading': isLoading }\\\" /> \")], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createElementVNode","ref","src","$props","alt","class","_normalizeClass","$data","isLoading","_hoisted_1","_createCommentVNode"],"sources":["C:\\Users\\IFPR\\Desktop\\a\\src\\components\\lazyload.vue"],"sourcesContent":["<!-- src/components/LazyImage.vue -->\r\n<template>\r\n    <img ref=\"a\" :src=\"src\" :alt=\"alt\" :class=\"{ 'loading': isLoading }\" />\r\n    <!-- <img ref=\"b\" :src=\"src\" :alt=\"alt\" :class=\"{ 'loading': isLoading }\" />s -->\r\n    <!-- <img ref=\"c\" :src=\"src\" :alt=\"alt\" :class=\"{ 'loading': isLoading }\" /> -->\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: 'LazyLoad',\r\n    props: {\r\n      src: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      alt: {\r\n        type: String,\r\n        default: ''\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        isLoading: true,\r\n        observer: null\r\n      };\r\n    },\r\n    mounted() {\r\n      this.loadImage();\r\n    },\r\n    methods: {\r\n      loadImage() {\r\n        this.observer = new IntersectionObserver((entries) => {\r\n          entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n              const img = entry.target;\r\n              img.src = this.src;\r\n              this.isLoading = false;\r\n              this.observer.unobserve(img);\r\n            }\r\n          });\r\n        });\r\n  \r\n        this.observer.observe(this.$refs.image);\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  </style>\r\n  "],"mappings":";mBAAA;;uBAAAA,mBAAA,CAAAC,SAAA,SAEIC,mBAAA,CAAuE;IAAlEC,GAAG,EAAC,GAAG;IAAEC,GAAG,EAAEC,MAAA,CAAAD,GAAG;IAAGE,GAAG,EAAED,MAAA,CAAAC,GAAG;IAAGC,KAAK,EAF7CC,eAAA;MAAA,WAE4DC,KAAA,CAAAC;IAAS;kCAFrEC,UAAA,GAGIC,mBAAA,sFAAiF,EACjFA,mBAAA,qFAAgF,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}